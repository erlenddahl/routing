using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Http;
using EnergyModule.Geometry;
using EnergyModule.Geometry.SimpleStructures;
using Microsoft.Extensions.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json.Linq;
using RoadNetworkRouting.Config;
using RoadNetworkRouting.Geometry;
using RoadNetworkRouting.Service;
using RoutingApi.Controllers;

namespace RoutingApi.Tests
{
    [TestClass]
    public class RoutingTests
    {
        [TestInitialize]
        public void Init()
        {
            //TODO: Fix issue with skeleton not working (see MultipleIdenticalRoutes test)
            //FullRoutingService.NetworkFile = "D:\\Lager\\RouteNetworkUpdater\\2023-01-09\\network.bin";
            FullRoutingService.NetworkFile = "D:\\Lager\\RouteNetworkUpdater\\2023-01-09\\network_skeleton.bin";
            FullRoutingService.SkeletonConfig = new SkeletonConfig() { LinkDataDirectory = "D:\\Lager\\RouteNetworkUpdater\\2023-01-09\\geometries" };
            FullRoutingService.Initialize();
        }

        [TestMethod]
        public void ShortRoute_AvoidBackAndForth()
        {
            // In the initial version, the router took U-turns both at the start and the end of this route.
            // (The problem was that some of the links weren't rotated correctly.)

            var response = new SingleRoutingRequest()
            {
                SourceSrid = 4326,
                Response = new RoutingResponseDefinition()
                {
                    LinkReferences = true,
                    Coordinates = true
                },
                OutputSrid = 4326,
                Waypoints = new[]
                {
                    new Point3D(10.415004587765168, 63.41784215066588),
                    new Point3D(10.414155474818585, 63.4179078153318),
                }
            }.Route().CheckThrow();

            Assert.AreEqual(62, response.DistanceM, 0.5);
            Assert.AreEqual(7, response.Coordinates.Count);
            Assert.AreEqual(3, response.LinkReferences.Count);

            //foreach (var c in response.Coordinates)
            //    Debug.WriteLine(c.X + ";" + c.Y);

            var referenceString = "0,36020569-0,52123529@622787-2;0,48851538-0,50344980@1548623-2;0,00000000-0,28672132@490120-2";
            Assert.AreEqual(referenceString, string.Join(";", response.LinkReferences));
        }

        [TestMethod]
        public void LongRoute()
        {
            var response = new SingleRoutingRequest()
            {
                SourceSrid = 4326,
                Response = new RoutingResponseDefinition()
                {
                    LinkReferences = true,
                    Coordinates = true
                },
                OutputSrid = 4326,
                RoutingConfig = new RoutingConfig()
                {
                    DifferentGroupHandling = GroupHandling.BestGroup,
                    MaxSearchRadius = int.MaxValue
                },
                Waypoints = new[]
                {
                    new Point3D(10.339970694099293, 63.63778918654236),
                    new Point3D(10.973513560882651, 63.670846973692676),
                }
            }.Route().CheckThrow();

            Assert.AreEqual(8051, response.DistanceM, 0.5);
            Assert.AreEqual(436, response.Coordinates.Count);
            Assert.AreEqual(187, response.LinkReferences.Count);

            foreach (var c in response.Coordinates)
                Debug.WriteLine(c.X + ";" + c.Y);

            var referenceString = "0,56680816-0,62796259@1585934;0,62796259-0,68935639@1585942;0,68935639-0,85696340@1585950;0,96577269-1,00000000@608264-2;0,91952592-0,96577269@608256-2;0,91580218-0,91952592@608248-2;0,90840507-0,91580218@608240-2;0,47507152-0,90840507@608232-2;0,37376380-0,47507152@608224-2;0,30746204-0,37376380@608216-2;0,24672361-0,30746204@608208-2;0,05795875-0,24672361@608200-2;0,05698341-0,05795875@608192-2;0,00000000-0,05698341@608184-2;0,33651385-0,59526771@1585790-2;0,66149729-1,00000000@1367848-2;0,69299352-1,00000000@1368033-2;0,68993795-0,69299352@1368025-2;0,13153654-0,68993795@1368016-2;0,11784443-0,13153654@1368008-2;0,08072065-0,11784443@1368000-2;0,78826094-0,79247844@617736;0,79247844-0,80040723@617744;0,80040723-0,80272466@617752;0,80272466-0,80581415@617760;0,80581415-0,80627793@617768;0,80627793-0,85858423@617776;0,85858423-0,86471397@617784;0,86471397-0,88432211@617792;0,88432211-0,90443194@617800;0,90443194-0,90920866@617808;0,90920866-0,91109169@617816;0,91109169-0,91346282@617824;0,91346282-0,91488522@617832;0,91488522-0,91667658@617840;0,91667658-0,92233074@617848;0,92233074-0,94784695@617856;0,94784695-0,97645599@617864;0,97645599-1,00000000@617872;0,44491872-0,48017520@564577-2;0,48017520-0,50550848@564578-2;0,50550848-0,52511692@564586-2;0,52511692-0,52819520@564601-2;0,52819520-0,53842163@564602-2;0,53842163-0,54965609@564605-2;0,54965609-0,55211097@564613-2;0,55211097-0,55529296@564614-2;0,55529296-0,56324011@564622-2;0,56324011-0,56981611@564623-2;0,56981611-0,57444859@564635-2;0,57444859-0,57680762@564636-2;0,00000000-0,70183718@617880;0,70183718-1,00000000@617888;0,59144384-0,59273905@564643-2;0,59273905-0,60631788@564659-2;0,60631788-0,64078271@564667-2;0,64078271-0,64531022@564676-2;0,00000000-0,26060307@617896;0,26060307-0,47377571@617904;0,47377571-0,48570099@617912;0,48570099-0,55306447@617920;0,55306447-0,59197664@617929;0,59197664-0,94104558@617937;0,94104558-0,99192035@617946;0,99192035-1,00000000@617954;0,69961065-0,72976893@564679-2;0,72976893-0,73157793@564687-2;0,73157793-0,73558974@564703-2;0,34075919-0,36682945@1558207-2;0,36682945-0,41380715@1558215-2;0,41380715-0,48454458@1558223-2;0,48454458-0,52525789@1558231-2;0,00000000-0,08550246@1594056-2;0,00000000-1,00000000@573905;0,65286636-0,72791207@1594064-2;0,00000000-1,00000000@573913;0,00000000-0,86620450@572264;0,00000000-0,40902591@1825572;0,81373376-0,81662130@593530-2;0,80947632-0,81373376@593522-2;0,71838069-0,80947632@593514-2;0,64940619-0,71838069@593506-2;0,62585592-0,64940619@593498-2;0,51037979-0,62585592@593490-2;0,41187972-0,51037979@593482-2;0,36790976-0,41187972@593474-2;0,35256222-0,36790976@593466-2;0,96076620-1,00000000@620026-2;0,94689113-0,96076620@620018-2;0,89567512-0,94689113@620010-2;0,63633406-0,89567512@620002-2;0,57700753-0,63633406@619994-2;0,54700166-0,57700753@619986-2;0,54156572-0,54700166@619978-2;0,53061140-0,54156572@619970-2;0,51800334-0,53061140@619962-2;0,41051745-0,51800334@619954-2;0,39611807-0,41051745@619946-2;0,35462651-0,39611807@619938-2;0,28823251-0,35462651@619930-2;0,25814658-0,28823251@619922-2;0,10575832-0,25814658@619914-2;0,10358935-0,10575832@619906-2;0,02180711-0,10358935@619898-2;0,00000000-0,02180711@619890-2;0,00000000-0,27709419@282881;0,27709419-1,00000000@282889;0,27057821-0,28315532@607199-2;0,00000000-0,04428661@577676-2;0,04428661-0,21779832@577684-2;0,00000000-0,41049340@282857;0,41049340-0,93033737@282865;0,93033737-1,00000000@282873;0,97829217-1,00000000@577500;0,00000000-0,02012535@577380;0,02012535-0,06949193@577388;0,06949193-0,13422848@577396;0,13422848-0,17454191@577404;0,17454191-0,24543798@577412;0,24543798-0,31552601@577420;0,31552601-0,39606017@577428;0,39606017-0,46240950@577436;0,46240950-0,51684803@577444;0,51684803-0,59736961@577452;0,00000000-0,19972908@1623890;0,19972908-1,00000000@1623898;0,52617723-1,00000000@1623786-2;0,02298006-0,15394926@1525403-2;0,15394926-0,18410262@1525411-2;0,18410262-0,18599735@1525419-2;0,18599735-0,19883218@1525427-2;0,19883218-0,22062288@1525435-2;0,22062288-0,26043373@1525443-2;0,26043373-0,33200717@1525451-2;0,00000000-0,04450039@604975;0,04450039-0,07947196@604983;0,07947196-0,07960093@604991;0,07960093-0,08150891@604999;0,08150891-0,08174163@605007;0,08174163-0,08745684@605015;0,08745684-0,08791948@605023;0,08791948-0,18219623@605031;0,18219623-0,28269953@605039;0,28269953-0,28960669@605047;0,28960669-0,30107084@605055;0,30107084-0,33762053@605063;0,33762053-0,46747056@605071;0,46747056-0,51362157@605079;0,51362157-0,56241441@605087;0,56241441-0,65390444@605095;0,65390444-0,77637440@605103;0,77637440-0,81804097@605111;0,00000000-0,72005564@210806;0,72005564-1,00000000@210814;0,00000000-0,08822425@210638;0,08822425-0,15004671@210646;0,15004671-0,23050417@210654;0,23050417-0,32550630@210662;0,00000000-0,20886874@210846;0,20886874-1,00000000@210854;0,11438940-0,91567332@210798-2;0,00000000-0,75019938@210926;0,75019938-1,00000000@210934;0,00000000-0,08712665@210710;0,08712665-0,32475659@210718;0,00000000-0,26486275@210966;0,26486275-1,00000000@210974;0,20946635-1,00000000@210790-2;0,95034683-0,95718300@1525459-2;0,95718300-0,99138445@1525467-2;0,00000000-0,76016545@605127;0,76016545-1,00000000@605135;0,00000000-0,05300921@471819;0,05300921-0,20821448@471833;0,00000000-0,00762981@1593924-2;0,00762981-0,07465363@1593932-2;0,07465363-0,10617287@1593940-2;0,10617287-0,17423944@1593948-2;0,17423944-0,17948472@1593956-2;0,17948472-0,23411332@1593964-2;0,23411332-0,27810401@1593972-2;0,27810401-0,32481489@1593980-2;0,32481489-0,60813498@1593988-2;0,85409915-1,00000000@1572017-2;0,56417537-0,85409915@1572009-2;0,00000000-0,01570230@1553895-2;0,01570230-1,00000000@1553903-2";
            Assert.AreEqual(referenceString, string.Join(";", response.LinkReferences));
        }

        [TestMethod]
        public void SingleRoute()
        {
            var response = new SingleRoutingRequest()
            {
                SourceSrid = 4326,
                Response = new RoutingResponseDefinition()
                {
                    LinkReferences = true,
                    Coordinates = true
                },
                OutputSrid = 4326,
                Waypoints = new[]
                {
                    new Point3D(10.412028, 63.413602),
                    new Point3D(10.350386, 63.399147),
                }
            }.Route().CheckThrow();

            Assert.AreEqual(8051, response.DistanceM, 0.5);
            Assert.AreEqual(436, response.Coordinates.Count);
            Assert.AreEqual(187, response.LinkReferences.Count);

            //foreach (var c in response.Coordinates)
                //Debug.WriteLine(c.X + ";" + c.Y);

            var referenceString = "0,59655395-0,62796259@1585934;0,62796259-0,68935639@1585942;0,68935639-0,85696340@1585950;0,96577269-1,00000000@608264-2;0,91952592-0,96577269@608256-2;0,91580218-0,91952592@608248-2;0,90840507-0,91580218@608240-2;0,47507152-0,90840507@608232-2;0,37376380-0,47507152@608224-2;0,30746204-0,37376380@608216-2;0,24672361-0,30746204@608208-2;0,05795875-0,24672361@608200-2;0,05698341-0,05795875@608192-2;0,00000000-0,05698341@608184-2;0,33651385-0,59526771@1585790-2;0,66149729-1,00000000@1367848-2;0,69299352-1,00000000@1368033-2;0,68993795-0,69299352@1368025-2;0,13153654-0,68993795@1368016-2;0,11784443-0,13153654@1368008-2;0,08072065-0,11784443@1368000-2;0,78826094-0,79247844@617736;0,79247844-0,80040723@617744;0,80040723-0,80272466@617752;0,80272466-0,80581415@617760;0,80581415-0,80627793@617768;0,80627793-0,85858423@617776;0,85858423-0,86471397@617784;0,86471397-0,88432211@617792;0,88432211-0,90443194@617800;0,90443194-0,90920866@617808;0,90920866-0,91109169@617816;0,91109169-0,91346282@617824;0,91346282-0,91488522@617832;0,91488522-0,91667658@617840;0,91667658-0,92233074@617848;0,92233074-0,94784695@617856;0,94784695-0,97645599@617864;0,97645599-1,00000000@617872;0,44491872-0,48017520@564577-2;0,48017520-0,50550848@564578-2;0,50550848-0,52511692@564586-2;0,52511692-0,52819520@564601-2;0,52819520-0,53842163@564602-2;0,53842163-0,54965609@564605-2;0,54965609-0,55211097@564613-2;0,55211097-0,55529296@564614-2;0,55529296-0,56324011@564622-2;0,56324011-0,56981611@564623-2;0,56981611-0,57444859@564635-2;0,57444859-0,57680762@564636-2;0,00000000-0,70183718@617880;0,70183718-1,00000000@617888;0,59144384-0,59273905@564643-2;0,59273905-0,60631788@564659-2;0,60631788-0,64078271@564667-2;0,64078271-0,64531022@564676-2;0,00000000-0,26060307@617896;0,26060307-0,47377571@617904;0,47377571-0,48570099@617912;0,48570099-0,55306447@617920;0,55306447-0,59197664@617929;0,59197664-0,94104558@617937;0,94104558-0,99192035@617946;0,99192035-1,00000000@617954;0,69961065-0,72976893@564679-2;0,72976893-0,73157793@564687-2;0,73157793-0,73558974@564703-2;0,34075919-0,36682945@1558207-2;0,36682945-0,41380715@1558215-2;0,41380715-0,48454458@1558223-2;0,48454458-0,52525789@1558231-2;0,00000000-0,08550246@1594056-2;0,00000000-1,00000000@573905;0,65286636-0,72791207@1594064-2;0,00000000-1,00000000@573913;0,00000000-0,86620450@572264;0,00000000-0,40902591@1825572;0,81373376-0,81662130@593530-2;0,80947632-0,81373376@593522-2;0,71838069-0,80947632@593514-2;0,64940619-0,71838069@593506-2;0,62585592-0,64940619@593498-2;0,51037979-0,62585592@593490-2;0,41187972-0,51037979@593482-2;0,36790976-0,41187972@593474-2;0,35256222-0,36790976@593466-2;0,96076620-1,00000000@620026-2;0,94689113-0,96076620@620018-2;0,89567512-0,94689113@620010-2;0,63633406-0,89567512@620002-2;0,57700753-0,63633406@619994-2;0,54700166-0,57700753@619986-2;0,54156572-0,54700166@619978-2;0,53061140-0,54156572@619970-2;0,51800334-0,53061140@619962-2;0,41051745-0,51800334@619954-2;0,39611807-0,41051745@619946-2;0,35462651-0,39611807@619938-2;0,28823251-0,35462651@619930-2;0,25814658-0,28823251@619922-2;0,10575832-0,25814658@619914-2;0,10358935-0,10575832@619906-2;0,02180711-0,10358935@619898-2;0,00000000-0,02180711@619890-2;0,00000000-0,27709419@282881;0,27709419-1,00000000@282889;0,27057821-0,28315532@607199-2;0,00000000-0,04428661@577676-2;0,04428661-0,21779832@577684-2;0,00000000-0,41049340@282857;0,41049340-0,93033737@282865;0,93033737-1,00000000@282873;0,97829217-1,00000000@577500;0,00000000-0,02012535@577380;0,02012535-0,06949193@577388;0,06949193-0,13422848@577396;0,13422848-0,17454191@577404;0,17454191-0,24543798@577412;0,24543798-0,31552601@577420;0,31552601-0,39606017@577428;0,39606017-0,46240950@577436;0,46240950-0,51684803@577444;0,51684803-0,59736961@577452;0,00000000-0,19972908@1623890;0,19972908-1,00000000@1623898;0,52617723-1,00000000@1623786-2;0,02298006-0,15394926@1525403-2;0,15394926-0,18410262@1525411-2;0,18410262-0,18599735@1525419-2;0,18599735-0,19883218@1525427-2;0,19883218-0,22062288@1525435-2;0,22062288-0,26043373@1525443-2;0,26043373-0,33200717@1525451-2;0,00000000-0,04450039@604975;0,04450039-0,07947196@604983;0,07947196-0,07960093@604991;0,07960093-0,08150891@604999;0,08150891-0,08174163@605007;0,08174163-0,08745684@605015;0,08745684-0,08791948@605023;0,08791948-0,18219623@605031;0,18219623-0,28269953@605039;0,28269953-0,28960669@605047;0,28960669-0,30107084@605055;0,30107084-0,33762053@605063;0,33762053-0,46747056@605071;0,46747056-0,51362157@605079;0,51362157-0,56241441@605087;0,56241441-0,65390444@605095;0,65390444-0,77637440@605103;0,77637440-0,81804097@605111;0,00000000-0,72005564@210806;0,72005564-1,00000000@210814;0,00000000-0,08822425@210638;0,08822425-0,15004671@210646;0,15004671-0,23050417@210654;0,23050417-0,32550630@210662;0,00000000-0,20886874@210846;0,20886874-1,00000000@210854;0,11438940-0,91567332@210798-2;0,00000000-0,75019938@210926;0,75019938-1,00000000@210934;0,00000000-0,08712665@210710;0,08712665-0,32475659@210718;0,00000000-0,26486275@210966;0,26486275-1,00000000@210974;0,20946635-1,00000000@210790-2;0,95034683-0,95718300@1525459-2;0,95718300-0,99138445@1525467-2;0,00000000-0,76016545@605127;0,76016545-1,00000000@605135;0,00000000-0,05300921@471819;0,05300921-0,20821448@471833;0,00000000-0,00762981@1593924-2;0,00762981-0,07465363@1593932-2;0,07465363-0,10617287@1593940-2;0,10617287-0,17423944@1593948-2;0,17423944-0,17948472@1593956-2;0,17948472-0,23411332@1593964-2;0,23411332-0,27810401@1593972-2;0,27810401-0,32481489@1593980-2;0,32481489-0,60813498@1593988-2;0,85409915-1,00000000@1572017-2;0,56417537-0,85409915@1572009-2;0,00000000-0,01570230@1553895-2;0,01570230-0,33302620@1553903-2";
            Assert.AreEqual(referenceString, string.Join(";", response.LinkReferences));
        }

        [TestMethod]
        public void MultipleIdenticalRoutes()
        {
            var responses = new MultiRoutingRequest()
            {
                SourceSrid = 4326,
                Response = new RoutingResponseDefinition()
                {
                    LinkReferences = true,
                    Coordinates = true,
                    Links = true
                },
                OutputSrid = 25833,
                Waypoints = Enumerable.Range(0, 20)
                    .Select(p => new[]
                    {
                        new Point3D(10.412028, 63.413602),
                        new Point3D(10.350386, 63.399147),
                    })
                    .ToArray()
            }.Route().ToArray();
            
            Assert.AreEqual(20, responses.Length);

            foreach (var response in responses)
            {
                response.CheckThrow();
                Assert.AreEqual(8051, response.DistanceM, 0.5);
                Assert.AreEqual(436, response.Coordinates.Count);
                Assert.AreEqual(187, response.LinkReferences.Count);

                var referenceString = "0,59655395-0,62796259@1585934;0,62796259-0,68935639@1585942;0,68935639-0,85696340@1585950;0,96577269-1,00000000@608264-2;0,91952592-0,96577269@608256-2;0,91580218-0,91952592@608248-2;0,90840507-0,91580218@608240-2;0,47507152-0,90840507@608232-2;0,37376380-0,47507152@608224-2;0,30746204-0,37376380@608216-2;0,24672361-0,30746204@608208-2;0,05795875-0,24672361@608200-2;0,05698341-0,05795875@608192-2;0,00000000-0,05698341@608184-2;0,33651385-0,59526771@1585790-2;0,66149729-1,00000000@1367848-2;0,69299352-1,00000000@1368033-2;0,68993795-0,69299352@1368025-2;0,13153654-0,68993795@1368016-2;0,11784443-0,13153654@1368008-2;0,08072065-0,11784443@1368000-2;0,78826094-0,79247844@617736;0,79247844-0,80040723@617744;0,80040723-0,80272466@617752;0,80272466-0,80581415@617760;0,80581415-0,80627793@617768;0,80627793-0,85858423@617776;0,85858423-0,86471397@617784;0,86471397-0,88432211@617792;0,88432211-0,90443194@617800;0,90443194-0,90920866@617808;0,90920866-0,91109169@617816;0,91109169-0,91346282@617824;0,91346282-0,91488522@617832;0,91488522-0,91667658@617840;0,91667658-0,92233074@617848;0,92233074-0,94784695@617856;0,94784695-0,97645599@617864;0,97645599-1,00000000@617872;0,44491872-0,48017520@564577-2;0,48017520-0,50550848@564578-2;0,50550848-0,52511692@564586-2;0,52511692-0,52819520@564601-2;0,52819520-0,53842163@564602-2;0,53842163-0,54965609@564605-2;0,54965609-0,55211097@564613-2;0,55211097-0,55529296@564614-2;0,55529296-0,56324011@564622-2;0,56324011-0,56981611@564623-2;0,56981611-0,57444859@564635-2;0,57444859-0,57680762@564636-2;0,00000000-0,70183718@617880;0,70183718-1,00000000@617888;0,59144384-0,59273905@564643-2;0,59273905-0,60631788@564659-2;0,60631788-0,64078271@564667-2;0,64078271-0,64531022@564676-2;0,00000000-0,26060307@617896;0,26060307-0,47377571@617904;0,47377571-0,48570099@617912;0,48570099-0,55306447@617920;0,55306447-0,59197664@617929;0,59197664-0,94104558@617937;0,94104558-0,99192035@617946;0,99192035-1,00000000@617954;0,69961065-0,72976893@564679-2;0,72976893-0,73157793@564687-2;0,73157793-0,73558974@564703-2;0,34075919-0,36682945@1558207-2;0,36682945-0,41380715@1558215-2;0,41380715-0,48454458@1558223-2;0,48454458-0,52525789@1558231-2;0,00000000-0,08550246@1594056-2;0,00000000-1,00000000@573905;0,65286636-0,72791207@1594064-2;0,00000000-1,00000000@573913;0,00000000-0,86620450@572264;0,00000000-0,40902591@1825572;0,81373376-0,81662130@593530-2;0,80947632-0,81373376@593522-2;0,71838069-0,80947632@593514-2;0,64940619-0,71838069@593506-2;0,62585592-0,64940619@593498-2;0,51037979-0,62585592@593490-2;0,41187972-0,51037979@593482-2;0,36790976-0,41187972@593474-2;0,35256222-0,36790976@593466-2;0,96076620-1,00000000@620026-2;0,94689113-0,96076620@620018-2;0,89567512-0,94689113@620010-2;0,63633406-0,89567512@620002-2;0,57700753-0,63633406@619994-2;0,54700166-0,57700753@619986-2;0,54156572-0,54700166@619978-2;0,53061140-0,54156572@619970-2;0,51800334-0,53061140@619962-2;0,41051745-0,51800334@619954-2;0,39611807-0,41051745@619946-2;0,35462651-0,39611807@619938-2;0,28823251-0,35462651@619930-2;0,25814658-0,28823251@619922-2;0,10575832-0,25814658@619914-2;0,10358935-0,10575832@619906-2;0,02180711-0,10358935@619898-2;0,00000000-0,02180711@619890-2;0,00000000-0,27709419@282881;0,27709419-1,00000000@282889;0,27057821-0,28315532@607199-2;0,00000000-0,04428661@577676-2;0,04428661-0,21779832@577684-2;0,00000000-0,41049340@282857;0,41049340-0,93033737@282865;0,93033737-1,00000000@282873;0,97829217-1,00000000@577500;0,00000000-0,02012535@577380;0,02012535-0,06949193@577388;0,06949193-0,13422848@577396;0,13422848-0,17454191@577404;0,17454191-0,24543798@577412;0,24543798-0,31552601@577420;0,31552601-0,39606017@577428;0,39606017-0,46240950@577436;0,46240950-0,51684803@577444;0,51684803-0,59736961@577452;0,00000000-0,19972908@1623890;0,19972908-1,00000000@1623898;0,52617723-1,00000000@1623786-2;0,02298006-0,15394926@1525403-2;0,15394926-0,18410262@1525411-2;0,18410262-0,18599735@1525419-2;0,18599735-0,19883218@1525427-2;0,19883218-0,22062288@1525435-2;0,22062288-0,26043373@1525443-2;0,26043373-0,33200717@1525451-2;0,00000000-0,04450039@604975;0,04450039-0,07947196@604983;0,07947196-0,07960093@604991;0,07960093-0,08150891@604999;0,08150891-0,08174163@605007;0,08174163-0,08745684@605015;0,08745684-0,08791948@605023;0,08791948-0,18219623@605031;0,18219623-0,28269953@605039;0,28269953-0,28960669@605047;0,28960669-0,30107084@605055;0,30107084-0,33762053@605063;0,33762053-0,46747056@605071;0,46747056-0,51362157@605079;0,51362157-0,56241441@605087;0,56241441-0,65390444@605095;0,65390444-0,77637440@605103;0,77637440-0,81804097@605111;0,00000000-0,72005564@210806;0,72005564-1,00000000@210814;0,00000000-0,08822425@210638;0,08822425-0,15004671@210646;0,15004671-0,23050417@210654;0,23050417-0,32550630@210662;0,00000000-0,20886874@210846;0,20886874-1,00000000@210854;0,11438940-0,91567332@210798-2;0,00000000-0,75019938@210926;0,75019938-1,00000000@210934;0,00000000-0,08712665@210710;0,08712665-0,32475659@210718;0,00000000-0,26486275@210966;0,26486275-1,00000000@210974;0,20946635-1,00000000@210790-2;0,95034683-0,95718300@1525459-2;0,95718300-0,99138445@1525467-2;0,00000000-0,76016545@605127;0,76016545-1,00000000@605135;0,00000000-0,05300921@471819;0,05300921-0,20821448@471833;0,00000000-0,00762981@1593924-2;0,00762981-0,07465363@1593932-2;0,07465363-0,10617287@1593940-2;0,10617287-0,17423944@1593948-2;0,17423944-0,17948472@1593956-2;0,17948472-0,23411332@1593964-2;0,23411332-0,27810401@1593972-2;0,27810401-0,32481489@1593980-2;0,32481489-0,60813498@1593988-2;0,85409915-1,00000000@1572017-2;0,56417537-0,85409915@1572009-2;0,00000000-0,01570230@1553895-2;0,01570230-0,33302620@1553903-2";
                Assert.AreEqual(referenceString, string.Join(";", response.LinkReferences));
            }
        }


        [TestMethod]
        public void ResponseSequence()
        {
            var responses = new MultiRoutingRequest()
            {
                SourceSrid = 4326,
                OutputSrid = 4326,
                Response = new RoutingResponseDefinition()
                {
                    RequestedWaypoints = true
                },
                Waypoints = new []
                {
                    new[]
                    {
                        new Point3D(10.1, 63.1),
                        new Point3D(10.350386, 63.399147)
                    },
                    new[]
                    {
                        new Point3D(10.2, 63.2),
                        new Point3D(10.350386, 63.399147)
                    },
                    new[]
                    {
                        new Point3D(10.3, 63.3),
                        new Point3D(10.350386, 63.399147)
                    },
                    new[]
                    {
                        new Point3D(10.4, 63.4),
                        new Point3D(10.350386, 63.399147)
                    },
                    new[]
                    {
                        new Point3D(10.5, 63.5),
                        new Point3D(10.350386, 63.399147)
                    }
                }
            }.Route().ToArray();

            for (var i = 0; i < responses.Count(); i++)
            {
                Console.WriteLine(responses[i].RequestedWaypoints[0].FromWaypoint.Y);
            }

            Assert.AreEqual(5, responses.Count());

            for (var i = 0; i < responses.Count(); i++)
            {
                responses[i].CheckThrow();
                Assert.AreEqual(63d + (i + 1d) / 10d, responses[i].RequestedWaypoints[0].FromWaypoint.Y, 0.0005);
            }
        }
    }
}
